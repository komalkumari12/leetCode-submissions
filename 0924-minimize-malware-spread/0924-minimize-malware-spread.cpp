class DisjoinSet{
    public:
        vector<int> parent, rank, size ;
        DisjoinSet(int n){
            parent.resize(n+1) ;
            rank.resize(n+1, 0) ;
            size.resize(n+1, 1) ;
            
            for(int i=0; i<n+1; i++)
                parent[i] = i ;
        }
        
        int findParent(int node){
            if(parent[node] == node)
                return node ;
            return parent[node] = findParent(parent[node]) ;
        }
        
        void unionByRank(int u, int v){
            int par_u = findParent(u) ;
            int par_v = findParent(v) ;
            
            if(par_u == par_v)  return ;
            if(rank[par_v] < rank[par_u]){
                parent[par_v] = par_u ;
            }
            else if(rank[par_v] > rank[par_u]){
                parent[par_u] = par_v ;
            }
            else{
                parent[par_v] = par_u ;
                rank[par_u]++ ;
            }
        }
        
        void unionBySize(int u, int v){
            int par_u = findParent(u) ;
            int par_v = findParent(v) ;
            
            if(par_u == par_v)  return ;
            if(size[par_u] < size[par_v]){
                parent[par_u] = par_v ;
                size[par_v] += size[par_u] ;
            }
            else{
                parent[par_v] = par_u ;
                size[par_u] += size[par_v] ;
            }
        }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size() ;
        DisjoinSet ds(n+1) ;
        
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(graph[i][j] == 1)
                    ds.unionBySize(i, j) ;
            }
        }
        
//         vector<int> infectedInCompo(n+1, 0) ;
//         for(int i=0; i<initial.size(); i++){
//             int parent = ds.findParent(initial[i]) ;
//             infectedInCompo[parent]++ ;
//         }
        
//         int infectedNode ;
//         int ans = INT_MIN ;
        
//         for(int i=0; i<initial.size(); i++){
//             int parent = ds.findParent(initial[i]) ;
            
//             if(infectedInCompo[parent]== 1  &&  ds.size[parent] >= ans){
//                 if(ans == ds.size[parent]){
//                     infectedNode = min(infectedNode, initial[i]) ;
//                 }
//                 else
//                     ans = ds.size[parent] ;
//             }
//         }
        
//         return infectedNode ;
        
        vector<int> infected(n+1, 0) ;
        for(auto it: initial){
            int par = ds.findParent(it) ;
            infected[par]++ ;
        }
        
        int ans = -1 ;
        int maxSize = -1 ;
        for(auto it: initial){
            int par = ds.findParent(it) ;
            
            if(infected[par] == 1  &&  ds.size[par] >= maxSize){
                if(maxSize == ds.size[par]){
                    ans = min(ans, it) ;
                }
                else{
                    ans = it ;
                }
                maxSize = ds.size[par] ;
            } 
        }
        
        if(ans == -1){
            int mini = n+1 ;
            for(auto it: initial){
                mini = min(mini, it) ;
            }
            return mini ;
        }
        
        return ans ;
    }
};